import React from 'react';
import { ArrowRight, Clock, TrendingUp, Lock } from 'lucide-react';

const NextStepSuggestion = ({ currentSection, readinessScore, onNavigate }) => {
  // Define the recommended flow and next steps
  const getNextStep = () => {
    const sectionFlow = {
      'home': {
        next: 'problemidentifier',
        label: 'Tr·ª£ L√Ω Th√¥ng Minh',
        reason: 'X√°c ƒë·ªãnh v·∫•n ƒë·ªÅ v√† nh·∫≠n g·ª£i √Ω c√¥ng c·ª• ph√π h·ª£p',
        time: '5-10 ph√∫t',
        icon: 'üí°',
        alternative: {
          section: 'personalhistory',
          label: 'Personal History (Kh√°ch h√†ng m·ªõi)',
          icon: 'üìã'
        }
      },
      'problemidentifier': {
        next: 'toolrecommender',
        label: 'Xem G·ª£i √ù C√¥ng C·ª•',
        reason: 'Nh·∫≠n danh s√°ch c√¥ng c·ª• ph√π h·ª£p v·ªõi v·∫•n ƒë·ªÅ ƒë√£ x√°c ƒë·ªãnh',
        time: '2-3 ph√∫t',
        icon: 'üéØ'
      },
      'toolrecommender': {
        next: 'readiness',
        label: 'ƒê√°nh Gi√° S·∫µn S√†ng',
        reason: 'ƒê√°nh gi√° m·ª©c ƒë·ªô s·∫µn s√†ng c·ªßa kh√°ch h√†ng tr∆∞·ªõc khi l√†m vi·ªác s√¢u',
        time: '10-15 ph√∫t',
        icon: '‚úÖ'
      },
      'personalhistory': {
        next: 'readiness',
        label: 'ƒê√°nh Gi√° S·∫µn S√†ng',
        reason: 'ƒê√°nh gi√° m·ª©c ƒë·ªô cam k·∫øt v√† s·∫µn s√†ng thay ƒë·ªïi',
        time: '10-15 ph√∫t',
        icon: '‚úÖ'
      },
      'readiness': {
        next: readinessScore >= 140 ? 'wheel' : (readinessScore >= 100 ? 'vakad' : 'wheel'),
        label: readinessScore >= 140 ? 'Wheel of Life' : (readinessScore >= 100 ? 'VAKAD Test' : 'Wheel of Life'),
        reason: readinessScore >= 140
          ? 'ƒêi·ªÉm cao! S·∫µn s√†ng cho c√¥ng vi·ªác chuy√™n s√¢u - b·∫Øt ƒë·∫ßu v·ªõi Wheel of Life'
          : readinessScore >= 100
          ? 'ƒêi·ªÉm kh√° t·ªët! Hi·ªÉu phong c√°ch h·ªçc t·∫≠p c·ªßa kh√°ch h√†ng'
          : 'X√¢y d·ª±ng s·ª± hi·ªÉu bi·∫øt v·ªÅ c√°c lƒ©nh v·ª±c cu·ªôc s·ªëng',
        time: '10-15 ph√∫t',
        icon: readinessScore >= 140 ? '‚≠ê' : readinessScore >= 100 ? 'üëÅÔ∏è' : '‚≠ï',
        warning: readinessScore < 60 ? 'ƒêi·ªÉm th·∫•p - t·∫≠p trung v√†o x√¢y d·ª±ng rapport v√† ƒë·ªông l·ª±c tr∆∞·ªõc' : null
      },
      'wheel': {
        next: readinessScore >= 100 ? 'values' : 'som',
        label: readinessScore >= 100 ? 'Values Hierarchy' : 'SOM Tool',
        reason: readinessScore >= 100
          ? 'Kh√°m ph√° gi√° tr·ªã c·ªët l√µi c·ªßa kh√°ch h√†ng'
          : 'ƒêo l∆∞·ªùng c∆∞·ªùng ƒë·ªô c·∫£m x√∫c v√† tr·∫°ng th√°i',
        time: '15-20 ph√∫t',
        icon: readinessScore >= 100 ? '‚ù§Ô∏è' : 'üéØ'
      },
      'vakad': {
        next: 'wheel',
        label: 'Wheel of Life',
        reason: 'ƒê√°nh gi√° to√†n di·ªán 8 lƒ©nh v·ª±c cu·ªôc s·ªëng',
        time: '15-20 ph√∫t',
        icon: '‚≠ï'
      },
      'som': {
        next: 'mapupdate',
        label: 'Map Update',
        reason: 'Chuy·ªÉn t·ª´ blame sang tr√°ch nhi·ªám c√° nh√¢n',
        time: '15-20 ph√∫t',
        icon: 'üó∫Ô∏è'
      },
      'values': {
        next: readinessScore >= 140 ? 'beliefs' : 'goals',
        label: readinessScore >= 140 ? 'Limiting Beliefs' : 'SMART Goals',
        reason: readinessScore >= 140
          ? 'L√†m vi·ªác v·ªõi ni·ªÅm tin h·∫°n ch·∫ø'
          : 'Thi·∫øt l·∫≠p m·ª•c ti√™u c·ª• th·ªÉ v√† kh·∫£ thi',
        time: '20-30 ph√∫t',
        icon: readinessScore >= 140 ? 'üß†' : 'üéØ'
      },
      'beliefs': {
        next: 'reframing',
        label: 'Reframing Toolkit',
        reason: '√Åp d·ª•ng k·ªπ thu·∫≠t reframe ƒë·ªÉ thay ƒë·ªïi g√≥c nh√¨n',
        time: '20-25 ph√∫t',
        icon: 'üîÑ'
      },
      'goals': {
        next: 'mapupdate',
        label: 'Map Update',
        reason: 'X√¢y d·ª±ng tr√°ch nhi·ªám c√° nh√¢n v·ªõi m·ª•c ti√™u',
        time: '15-20 ph√∫t',
        icon: 'üó∫Ô∏è'
      },
      'reframing': {
        next: readinessScore >= 140 ? 'timeline' : 'worksheet',
        label: readinessScore >= 140 ? 'Timeline Therapy' : 'Worksheet',
        reason: readinessScore >= 140
          ? 'L√†m vi·ªác v·ªõi s·ª± ki·ªán qu√° kh·ª© v√† c·∫£m x√∫c'
          : 'T·ªïng h·ª£p v√† l·∫≠p k·∫ø ho·∫°ch h√†nh ƒë·ªông',
        time: readinessScore >= 140 ? '30-40 ph√∫t' : '10-15 ph√∫t',
        icon: readinessScore >= 140 ? '‚è≥' : 'üìÑ'
      },
      'timeline': {
        next: 'worksheet',
        label: 'Worksheet',
        reason: 'T·ªïng h·ª£p to√†n b·ªô session v√† l·∫≠p action plan',
        time: '10-15 ph√∫t',
        icon: 'üìÑ'
      },
      'mapupdate': {
        next: 'worksheet',
        label: 'Worksheet',
        reason: 'T·ªïng h·ª£p k·∫øt qu·∫£ v√† l·∫≠p k·∫ø ho·∫°ch h√†nh ƒë·ªông',
        time: '10-15 ph√∫t',
        icon: 'üìÑ'
      },
      'worksheet': {
        next: 'followup',
        label: 'L√™n L·ªãch Follow-up',
        reason: 'Theo d√µi ti·∫øn ƒë·ªô v√† cam k·∫øt ti·∫øp theo',
        time: '5 ph√∫t',
        icon: 'üìà'
      }
    };

    return sectionFlow[currentSection] || null;
  };

  const nextStep = getNextStep();

  if (!nextStep || currentSection === 'home') return null;

  return (
    <div className="mt-8 border-t-2 border-gray-200 pt-6">
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-300 rounded-xl p-6 shadow-lg">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <div className="flex items-center space-x-2 mb-3">
              <TrendingUp className="w-5 h-5 text-blue-600" />
              <h3 className="text-lg font-bold text-blue-900">B∆∞·ªõc Ti·∫øp Theo ƒê∆∞·ª£c G·ª£i √ù</h3>
            </div>

            {nextStep.warning && (
              <div className="bg-yellow-100 border-l-4 border-yellow-500 p-3 mb-4 rounded">
                <p className="text-sm text-yellow-800 font-semibold">‚ö†Ô∏è {nextStep.warning}</p>
              </div>
            )}

            <div className="space-y-3">
              <div className="bg-white rounded-lg p-4 border-2 border-blue-200 hover:border-blue-400 transition">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <span className="text-2xl">{nextStep.icon}</span>
                    <h4 className="text-xl font-bold text-gray-800">{nextStep.label}</h4>
                  </div>
                  <div className="flex items-center text-sm text-gray-600">
                    <Clock className="w-4 h-4 mr-1" />
                    <span>{nextStep.time}</span>
                  </div>
                </div>

                <p className="text-sm text-gray-700 mb-3">{nextStep.reason}</p>

                <button
                  onClick={() => onNavigate(nextStep.next)}
                  className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold py-3 px-4 rounded-lg flex items-center justify-center space-x-2 transition shadow-md hover:shadow-lg"
                >
                  <span>Ti·∫øp t·ª•c v·ªõi {nextStep.label}</span>
                  <ArrowRight className="w-5 h-5" />
                </button>
              </div>

              {nextStep.alternative && (
                <div className="bg-gray-50 rounded-lg p-3 border border-gray-300">
                  <p className="text-xs font-semibold text-gray-600 mb-2">Ho·∫∑c b·∫°n c√≥ th·ªÉ:</p>
                  <button
                    onClick={() => onNavigate(nextStep.alternative.section)}
                    className="w-full bg-white border-2 border-gray-300 hover:border-gray-400 text-gray-700 font-medium py-2 px-3 rounded-lg flex items-center justify-center space-x-2 transition text-sm"
                  >
                    <span>{nextStep.alternative.icon}</span>
                    <span>{nextStep.alternative.label}</span>
                    <ArrowRight className="w-4 h-4" />
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NextStepSuggestion;
