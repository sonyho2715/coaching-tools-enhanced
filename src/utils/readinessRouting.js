/**
 * Readiness-Based Routing System
 * Controls access to tools based on client readiness score
 */

export const getReadinessRouting = (readinessScore) => {
  // Calculate total readiness score
  const totalScore = typeof readinessScore === 'object'
    ? Object.values(readinessScore).flat().reduce((a, b) => a + b, 0)
    : readinessScore || 0;

  if (totalScore < 60) {
    return {
      level: 'not-ready',
      score: totalScore,
      message: '‚ö†Ô∏è Kh√°ch h√†ng ch∆∞a s·∫µn s√†ng cho coaching chuy√™n s√¢u',
      recommendation: 'T·∫≠p trung v√†o x√¢y d·ª±ng rapport, ƒë·ªông l·ª±c v√† s·∫µn s√†ng thay ƒë·ªïi tr∆∞·ªõc',
      allowedTools: [
        'home',
        'sessiontimer',
        'personalhistory',
        'readiness',
        'wheel',
        'som',
        'questions',
        'email',
        'sessionnotes',
        'worksheet'
      ],
      lockedTools: [
        'values',
        'beliefs',
        'energy',
        'goals',
        'reframing',
        'anchoring',
        'timeline',
        'spiraldynamics',
        'metaprograms',
        'personalcolor'
      ],
      suggestedNext: ['wheel', 'som', 'sessionnotes'],
      warningColor: 'red'
    };
  }

  if (totalScore >= 60 && totalScore < 100) {
    return {
      level: 'low-readiness',
      score: totalScore,
      message: 'üü° Kh√°ch h√†ng c√≥ s·∫µn s√†ng c∆° b·∫£n',
      recommendation: 'C√≥ th·ªÉ b·∫Øt ƒë·∫ßu v·ªõi c√°c c√¥ng c·ª• ƒë∆°n gi·∫£n. Tr√°nh k·ªπ thu·∫≠t NLP n√¢ng cao.',
      allowedTools: [
        'home',
        'sessiontimer',
        'personalhistory',
        'readiness',
        'wheel',
        'som',
        'vakad',
        'mapupdate',
        'questions',
        'email',
        'problemidentifier',
        'toolrecommender',
        'sessionnotes',
        'worksheet',
        'followup'
      ],
      lockedTools: [
        'values',
        'beliefs',
        'reframing',
        'anchoring',
        'timeline',
        'spiraldynamics',
        'metaprograms'
      ],
      suggestedNext: ['wheel', 'vakad', 'mapupdate'],
      warningColor: 'yellow'
    };
  }

  if (totalScore >= 100 && totalScore < 140) {
    return {
      level: 'medium-readiness',
      score: totalScore,
      message: 'üü¢ Kh√°ch h√†ng s·∫µn s√†ng t·ªët',
      recommendation: 'C√≥ th·ªÉ s·ª≠ d·ª•ng h·∫ßu h·∫øt c√¥ng c·ª•. Th·∫≠n tr·ªçng v·ªõi Timeline Therapy.',
      allowedTools: [
        'home',
        'sessiontimer',
        'personalhistory',
        'readiness',
        'wheel',
        'som',
        'vakad',
        'personalcolor',
        'spiraldynamics',
        'metaprograms',
        'values',
        'energy',
        'goals',
        'mapupdate',
        'reframing',
        'questions',
        'email',
        'problemidentifier',
        'toolrecommender',
        'sessionnotes',
        'worksheet',
        'followup',
        'analytics'
      ],
      lockedTools: [
        'beliefs',
        'anchoring',
        'timeline'
      ],
      suggestedNext: ['values', 'vakad', 'goals'],
      warningColor: 'green'
    };
  }

  // Score >= 140
  return {
    level: 'high-readiness',
    score: totalScore,
    message: '‚≠ê Kh√°ch h√†ng r·∫•t s·∫µn s√†ng!',
    recommendation: 'C√≥ th·ªÉ s·ª≠ d·ª•ng t·∫•t c·∫£ c√¥ng c·ª• including Timeline Therapy v√† Anchoring.',
    allowedTools: 'all', // All tools available
    lockedTools: [],
    suggestedNext: ['values', 'beliefs', 'timeline', 'anchoring'],
    warningColor: 'blue'
  };
};

export const isToolAllowed = (toolId, readinessScore) => {
  const routing = getReadinessRouting(readinessScore);

  if (routing.allowedTools === 'all') {
    return true;
  }

  return routing.allowedTools.includes(toolId);
};

export const getToolLockMessage = (toolId, readinessScore) => {
  const routing = getReadinessRouting(readinessScore);

  const messages = {
    'values': {
      minScore: 100,
      message: 'Values Hierarchy y√™u c·∫ßu ƒëi·ªÉm s·∫µn s√†ng ‚â• 100',
      tip: 'L√†m Wheel of Life v√† VAKAD tr∆∞·ªõc'
    },
    'beliefs': {
      minScore: 140,
      message: 'Limiting Beliefs Work y√™u c·∫ßu ƒëi·ªÉm s·∫µn s√†ng ‚â• 140',
      tip: 'C√¥ng c·ª• n√†y c·∫ßn m·ª©c ƒë·ªô t·ª± nh·∫≠n th·ª©c v√† s·∫µn s√†ng cao'
    },
    'reframing': {
      minScore: 100,
      message: 'Reframing Toolkit y√™u c·∫ßu ƒëi·ªÉm s·∫µn s√†ng ‚â• 100',
      tip: 'Kh√°ch h√†ng c·∫ßn s·∫µn s√†ng nh√¨n nh·∫≠n v·∫•n ƒë·ªÅ t·ª´ g√≥c ƒë·ªô kh√°c'
    },
    'anchoring': {
      minScore: 140,
      message: 'Anchoring Guide y√™u c·∫ßu ƒëi·ªÉm s·∫µn s√†ng ‚â• 140',
      tip: 'K·ªπ thu·∫≠t NLP n√¢ng cao - c·∫ßn kinh nghi·ªám v√† s·∫µn s√†ng cao'
    },
    'timeline': {
      minScore: 140,
      message: 'Timeline Therapy y√™u c·∫ßu ƒëi·ªÉm s·∫µn s√†ng ‚â• 140',
      tip: 'L√†m vi·ªác v·ªõi trauma qu√° kh·ª© - ch·ªâ d√†nh cho kh√°ch h√†ng r·∫•t s·∫µn s√†ng'
    },
    'spiraldynamics': {
      minScore: 100,
      message: 'Spiral Dynamics y√™u c·∫ßu ƒëi·ªÉm s·∫µn s√†ng ‚â• 100',
      tip: 'C·∫ßn kh·∫£ nƒÉng t∆∞ duy tr·ª´u t∆∞·ª£ng'
    },
    'metaprograms': {
      minScore: 100,
      message: 'Meta-Programs y√™u c·∫ßu ƒëi·ªÉm s·∫µn s√†ng ‚â• 100',
      tip: 'Ph√¢n t√≠ch s√¢u v·ªÅ patterns - c·∫ßn s·ª± t·∫≠p trung cao'
    }
  };

  return messages[toolId] || {
    minScore: 60,
    message: `C√¥ng c·ª• n√†y y√™u c·∫ßu ƒëi·ªÉm s·∫µn s√†ng cao h∆°n (hi·ªán t·∫°i: ${routing.score})`,
    tip: 'L√†m Readiness Assessment ƒë·ªÉ n√¢ng ƒëi·ªÉm'
  };
};

export const shouldShowWarning = (readinessScore) => {
  const routing = getReadinessRouting(readinessScore);
  return routing.score < 100;
};

export const getReadinessAdvice = (readinessScore) => {
  const routing = getReadinessRouting(readinessScore);

  const advice = {
    'not-ready': {
      title: '‚ö†Ô∏è Ch∆∞a S·∫µn S√†ng Coaching',
      actions: [
        'X√¢y d·ª±ng rapport m·∫°nh m·∫Ω h∆°n',
        'Kh√°m ph√° ƒë·ªông l·ª±c thay ƒë·ªïi (Wheel of Life)',
        'Gi·∫£i quy·∫øt red flags n·∫øu c√≥',
        'T·∫≠p trung v√†o cam k·∫øt nh·ªè (Quick wins)'
      ],
      avoid: [
        'Kh√¥ng √©p bu·ªôc cam k·∫øt l·ªõn',
        'Tr√°nh c√°c c√¥ng c·ª• ph·ª©c t·∫°p',
        'Kh√¥ng l√†m Timeline Therapy ho·∫∑c Beliefs Work'
      ]
    },
    'low-readiness': {
      title: 'üü° S·∫µn S√†ng C∆° B·∫£n',
      actions: [
        'S·ª≠ d·ª•ng Wheel of Life ƒë·ªÉ tƒÉng awareness',
        'VAKAD ƒë·ªÉ hi·ªÉu learning style',
        'Map Update cho responsibility shift',
        'B·∫Øt ƒë·∫ßu v·ªõi m·ª•c ti√™u nh·ªè, ƒë·∫°t ƒë∆∞·ª£c'
      ],
      avoid: [
        'Tr√°nh Timeline Therapy',
        'Ch∆∞a l√†m Beliefs Work',
        'Kh√¥ng anchor ho·∫∑c deep NLP techniques'
      ]
    },
    'medium-readiness': {
      title: 'üü¢ S·∫µn S√†ng T·ªët',
      actions: [
        'Values Hierarchy ƒë·ªÉ hi·ªÉu core values',
        'SMART Goals cho action planning',
        'Reframing techniques',
        'Meta-Programs cho deeper understanding'
      ],
      avoid: [
        'C·∫©n th·∫≠n v·ªõi Timeline n·∫øu c√≥ trauma',
        'Anchoring c·∫ßn practice tr∆∞·ªõc'
      ]
    },
    'high-readiness': {
      title: '‚≠ê R·∫•t S·∫µn S√†ng!',
      actions: [
        'Timeline Therapy cho past issues',
        'Beliefs Work cho transformation',
        'Anchoring cho resource states',
        'Spiral Dynamics cho big picture'
      ],
      avoid: []
    }
  };

  return advice[routing.level];
};
